{"version":3,"sources":["Navbar.js","Greeter.js","Counter.js","MoodToggler.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","Greeter","name","excitement","age","repeat","onClick","alert","Counter","step","useState","count","setCount","className","MoodToggler","isHappy","setIsHappy","styles","color","style","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6RAceA,MAZf,WACI,OACI,6BACI,4BACI,oCACA,uCACA,wCCUDC,MAhBf,YAAiD,IAA9BC,EAA6B,EAA7BA,KAA6B,IAAvBC,kBAAuB,MAAV,EAAU,EAAPC,EAAO,EAAPA,IAIrC,OACI,oCACI,yCACeF,EACV,IAAIG,OAAOF,IAEhB,sCAAYC,EAAZ,cACA,4BAAQE,QAVF,WACVC,MAAM,eAAD,OAAgBL,MASjB,c,aCAGM,MAVf,YAAgC,IAAD,IAAZC,YAAY,MAAL,EAAK,IACDC,mBAAS,GADR,mBACpBC,EADoB,KACbC,EADa,KAE3B,OACI,yBAAKC,UAAU,WACX,4BAAKF,GACL,4BAAQL,QAAS,kBAAMM,EAASD,EAAQF,KAAxC,IAAiDA,K,MCQ9CK,MAbf,WAAwB,IAAD,EACWJ,oBAAS,GADpB,mBACZK,EADY,KACHC,EADG,KAKbC,EAAS,CAAEC,MAAOH,EAAU,QAAU,OAC5C,OACI,wBAAIF,UAAU,cAAcM,MAAOF,EAAQX,QALzB,WAClBU,GAAYD,KAKPA,EAAU,KAAO,O,MCUfK,MAdf,WACI,OACI,6BACI,kBAAC,EAAD,CAASX,KAAM,IACf,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASP,KAAK,SAASE,IAAI,KAAKD,WAAY,IAC5C,kBAAC,EAAD,CAASD,KAAK,OAAOE,IAAI,KAAKD,WAAY,IAC1C,wCCJQkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8e266849.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav>\r\n            <ul>\r\n                <li>Home</li>\r\n                <li>Contact</li>\r\n                <li>About</li>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nfunction Greeter({ name, excitement = 5, age }) {\r\n    const greet = () => {\r\n        alert(`Hello there ${name}`);\r\n    };\r\n    return (\r\n        <>\r\n            <h1>\r\n                Hi there, {name}\r\n                {'!'.repeat(excitement)}\r\n            </h1>\r\n            <p>You are {age} years old</p>\r\n            <button onClick={greet}>Click Me</button>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Greeter;\r\n","import React, { useState } from 'react';\r\nimport './Counter.css';\r\n\r\nfunction Counter({ step = 1 }) {\r\n    const [count, setCount] = useState(0);\r\n    return (\r\n        <div className=\"counter\">\r\n            <h2>{count}</h2>\r\n            <button onClick={() => setCount(count + step)}>+{step}</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Counter;\r\n","import React, { useState } from 'react';\r\nimport './MoodToggler.css';\r\n\r\nfunction MoodToggler() {\r\n    const [isHappy, setIsHappy] = useState(true);\r\n    const toggleIsHappy = () => {\r\n        setIsHappy(!isHappy);\r\n    };\r\n    const styles = { color: isHappy ? 'green' : 'red' };\r\n    return (\r\n        <h3 className=\"MoodToggler\" style={styles} onClick={toggleIsHappy}>\r\n            {isHappy ? ':)' : ':('}\r\n        </h3>\r\n    );\r\n}\r\n\r\nexport default MoodToggler;\r\n","import React from 'react';\nimport Navbar from './Navbar';\nimport Greeter from './Greeter';\nimport Counter from './Counter';\nimport MoodToggler from './MoodToggler';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div>\n            <Counter step={5} />\n            <Counter />\n            <MoodToggler />\n            <Navbar />\n            <Greeter name=\"Denzel\" age=\"23\" excitement={4} />\n            <Greeter name=\"Mike\" age=\"51\" excitement={1} />\n            <h1>HELLO!</h1>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}